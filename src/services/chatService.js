import { webhookService } from './webhookService';

// Mock AI responses - replace with real AI API later
const MOCK_AI_RESPONSES = [
  'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?',
  'T√¥i hi·ªÉu r·ªìi. ƒê·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n, b·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin kh√¥ng?',
  'ƒê√¢y l√† m·ªôt c√¢u h·ªèi hay! H√£y ƒë·ªÉ t√¥i suy nghƒ© m·ªôt ch√∫t...',
  'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. T√¥i s·∫Ω c·ªë g·∫Øng h·ªó tr·ª£ b·∫°n t·ªët nh·∫•t c√≥ th·ªÉ.',
  'T√¥i ƒë√£ hi·ªÉu v·∫•n ƒë·ªÅ c·ªßa b·∫°n. ƒê√¢y l√† g·ª£i √Ω c·ªßa t√¥i...'
];

// Simulate API delay
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Check webhook health
const checkWebhookHealth = async () => {
  try {
    const testPayload = {
      action: 'health_check',
      timestamp: new Date().toISOString(),
      test: true
    };
    
    const response = await fetch('https://kpspa.app.n8n.cloud/webhook-test/e9bbd901-ec61-424a-963f-8b63a7f9b17d', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      mode: 'cors',
      body: JSON.stringify(testPayload)
    });
    
    if (response.status === 400) {
      const errorText = await response.text();
      if (errorText.includes('ip not local')) {
        console.warn('üö´ Webhook health check: IP restriction detected');
        return { healthy: false, reason: 'IP_BLOCKED', details: errorText };
      }
    }
    
    return { 
      healthy: response.ok, 
      status: response.status, 
      reason: response.ok ? 'OK' : 'HTTP_ERROR',
      details: response.statusText 
    };
  } catch (error) {
    console.error('‚ùå Webhook health check failed:', error);
    return { healthy: false, reason: 'NETWORK_ERROR', details: error.message };
  }
};

export const chatService = {
  // Send message to AI
  async sendMessage(message, attachments = [], userId = null) {
    try {
      // Get current user info
      const user = JSON.parse(localStorage.getItem('userInfo') || '{}');
      const currentUserId = userId || user.employeeId;
      
      // Prepare chat data for webhook
      const chatData = {
        id: `chat-${Date.now()}`,
        userId: currentUserId,
        userName: user.name || 'Anonymous',
        userMessage: message,
        attachments: attachments.map(file => ({
          name: file.name,
          type: file.type,
          size: file.size
        })),
        sessionId: localStorage.getItem('sessionId') || `session-${Date.now()}`,
        context: {
          messageLength: message.length,
          hasAttachments: attachments.length > 0,
          attachmentCount: attachments.length,
          userId: currentUserId
        }
      };
      
      console.log('üì§ Sending message for userId:', currentUserId);
      
      // Try webhook with axios first
      let webhookResult = await webhookService.sendChatMessage(chatData);
      
      // If axios fails, try with fetch as fallback
      if (!webhookResult.success) {
        console.warn('üîÑ Axios failed, trying fetch method...');
        
        // Check if it's an IP restriction error
        if (webhookResult.error && webhookResult.error.includes('IP restriction')) {
          console.warn('üö´ IP restriction detected, skipping fetch fallback and using mock response');
          webhookResult = { success: false, error: 'IP_BLOCKED' };
        } else {
          webhookResult = await webhookService.testWithFetch(chatData);
        }
      }
      
      let aiResponse;
      if (webhookResult.success && webhookResult.data && webhookResult.data.response) {
        // Use response from webhook
        aiResponse = webhookResult.data.response;
        console.log('‚úÖ AI Response received:', aiResponse);
      } else {
        // Fallback to mock response if webhook fails
        console.warn('‚ö†Ô∏è Webhook failed or no response, using fallback');
        console.warn('Webhook error:', webhookResult.error);
        
        const lowerMessage = message.toLowerCase();
        
        // Check if it's an IP restriction error
        if (webhookResult.error === 'IP_BLOCKED' || (webhookResult.error && webhookResult.error.includes('IP restriction'))) {
          aiResponse = 'üö´ **K·∫øt n·ªëi webhook b·ªã h·∫°n ch·∫ø IP**\n\n' +
                      'Hi·ªán t·∫°i n8n webhook ƒëang ch·∫∑n truy c·∫≠p t·ª´ IP address n√†y. ' +
                      'ƒê√¢y l√† ch·∫ø ƒë·ªô b·∫£o m·∫≠t c·ªßa n8n cloud.\n\n' +
                      '**Gi·∫£i ph√°p:**\n' +
                      '‚Ä¢ S·ª≠ d·ª•ng VPN v·ªõi IP ƒë∆∞·ª£c ph√©p\n' +
                      '‚Ä¢ C·∫•u h√¨nh IP whitelist trong n8n\n' +
                      '‚Ä¢ Tri·ªÉn khai proxy server\n\n' +
                      '_Hi·ªán ƒëang s·ª≠ d·ª•ng ch·∫ø ƒë·ªô offline v·ªõi mock responses._';
        } else if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello')) {
          aiResponse = 'Xin ch√†o! T√¥i l√† AI assistant c·ªßa PingMe. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';
        } else if (lowerMessage.includes('c·∫£m ∆°n')) {
          aiResponse = 'Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n.';
        } else if (lowerMessage.includes('t·∫°m bi·ªát')) {
          aiResponse = 'T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i b·∫°n s·ªõm nh√©!';
        } else {
          // Random response
          aiResponse = MOCK_AI_RESPONSES[Math.floor(Math.random() * MOCK_AI_RESPONSES.length)];
        }
        
        // Handle attachments for fallback
        if (attachments.length > 0) {
          const fileTypes = attachments.map(file => {
            if (file.type.startsWith('image/')) return 'h√¨nh ·∫£nh';
            if (file.type.includes('pdf')) return 'PDF';
            return 'file';
          });
          aiResponse += `\n\nT√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${fileTypes.join(', ')} t·ª´ b·∫°n. T√¥i s·∫Ω ph√¢n t√≠ch v√† ph·∫£n h·ªìi s·ªõm nh·∫•t.`;
        }
      }
      
      const aiMessage = {
        id: `msg-${Date.now()}`,
        content: aiResponse,
        timestamp: new Date().toISOString(),
        sender: 'ai'
      };
      
      return {
        success: true,
        data: aiMessage
      };
      
    } catch (error) {
      console.error('Error in sendMessage:', error);
      
      // Fallback error response
      const errorMessage = {
        id: `msg-${Date.now()}`,
        content: 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.',
        timestamp: new Date().toISOString(),
        sender: 'ai'
      };
      
      return {
        success: false,
        data: errorMessage,
        error: error.message
      };
    }
  },

  // Upload file (mock)
  async uploadFile(file) {
    await delay(500);
    
    // Validate file size (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      return {
        success: false,
        message: 'File qu√° l·ªõn. Vui l√≤ng ch·ªçn file nh·ªè h∆°n 10MB.'
      };
    }
    
    const fileData = {
      id: `file-${Date.now()}`,
      name: file.name,
      size: file.size,
      type: file.type,
      url: URL.createObjectURL(file) // For preview
    };
    
    // Send file upload info to webhook
    try {
      await webhookService.sendFileUpload(fileData);
    } catch (error) {
      console.error('Failed to send file upload to webhook:', error);
      // Don't fail the upload if webhook fails
    }
    
    return {
      success: true,
      data: fileData
    };
  },

  // Get chat history from webhook or fallback to mock
  async getChatHistory(userId) {
    try {
      console.log('üìö Getting chat history for userId:', userId);
      
      // Try to get from webhook first
      const webhookResult = await webhookService.getChatHistory(userId);
      
      if (webhookResult.success && webhookResult.data) {
        console.log('‚úÖ Chat history loaded from webhook');
        
        // Format data if needed (webhook might return different format)
        let historyData = webhookResult.data;
        
        // If webhook returns an array of messages directly
        if (Array.isArray(historyData)) {
          return {
            success: true,
            data: historyData
          };
        }
        
        // If webhook returns object with messages array
        if (historyData.messages && Array.isArray(historyData.messages)) {
          return {
            success: true,
            data: historyData.messages
          };
        }
        
        // If webhook returns something else, try to extract messages
        console.warn('‚ö†Ô∏è Unexpected webhook response format:', historyData);
      }
      
      // Fallback to mock data if webhook fails
      console.warn('‚ö†Ô∏è Webhook failed, using mock chat history');
      await delay(500);
      
      return {
        success: true,
        data: [
          {
            id: 'msg-1',
            content: 'Xin ch√†o! T√¥i l√† AI assistant c·ªßa PingMe. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
            timestamp: new Date(Date.now() - 5 * 60 * 1000).toISOString(),
            sender: 'ai'
          }
        ]
      };
      
    } catch (error) {
      console.error('‚ùå Error getting chat history:', error);
      
      // Return empty history on error
      return {
        success: false,
        data: [],
        error: error.message
      };
    }
  },

  // Check webhook health status
  async checkWebhookHealth() {
    return await checkWebhookHealth();
  }
};